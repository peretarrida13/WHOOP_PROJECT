{"ast":null,"code":"import workouts from '../Exercises/Workout.json';\nexport function calculatePerformance(workout) {\n  // Constants for maximum values (you need to set these based on your personal records)\n  const MaxStrain = 21; // Example value\n  const MaxCalories = 2000; // Example value\n\n  // Weights for each component\n  const W1 = 0.3; // Weight for Strain\n  const W2 = 0.25; // Weight for Heart Rate\n  const W3 = 0.25; // Weight for Calories\n  const W4 = 0.2; // Weight for Heart Rate Zones\n\n  // Normalizing Strain and Calories\n  const normalizedStrain = Math.min(workout.score.strain / MaxStrain * 10, 10);\n  const normalizedCalories = Math.min(Math.floor(workout.score.kilojoule * 0.239006) / MaxCalories * 10, 10); // Assuming kilojoule is equivalent to calories\n\n  // Heart Rate Intensity Score\n  const hrIntensityScore = Math.min(workout.score.average_heart_rate / workout.score.max_heart_rate * 10, 10);\n\n  // Heart Rate Zones Score\n  const totalZoneTime = workout.score.zone_duration.zone_five_milli + workout.score.zone_duration.zone_four_milli + workout.score.zone_duration.zone_three_milli + workout.score.zone_duration.zone_two_milli + workout.score.zone_duration.zone_one_milli + workout.score.zone_duration.zone_zero_milli;\n  const hrZoneScore = Math.min((workout.score.zone_duration.zone_five_milli * 5 + workout.score.zone_duration.zone_four_milli * 4 + workout.score.zone_duration.zone_three_milli * 3 + workout.score.zone_duration.zone_two_milli * 2 + workout.score.zone_duration.zone_one_milli * 1) / totalZoneTime * 10, 10);\n\n  // Calculate final performance score\n  const performanceScore = Math.min(W1 * normalizedStrain + W2 * hrIntensityScore + W3 * normalizedCalories + W4 * hrZoneScore, 10);\n  return Math.floor(performanceScore * 100) / 100;\n}\nexport function getWorkoutType(id) {\n  for (let i = 0; i < workouts.length; ++i) {\n    if (workouts[i].id === id) {\n      return workouts[i].sport;\n    }\n  }\n  return \"Activity (no recognized Sport)\";\n}","map":{"version":3,"names":["workouts","calculatePerformance","workout","MaxStrain","MaxCalories","W1","W2","W3","W4","normalizedStrain","Math","min","score","strain","normalizedCalories","floor","kilojoule","hrIntensityScore","average_heart_rate","max_heart_rate","totalZoneTime","zone_duration","zone_five_milli","zone_four_milli","zone_three_milli","zone_two_milli","zone_one_milli","zone_zero_milli","hrZoneScore","performanceScore","getWorkoutType","id","i","length","sport"],"sources":["/Users/peretarrida__/Desktop/PERE TARRIDA/Projectes/WHOOP_PROJECT/src/Utils/performanceCalculator.js"],"sourcesContent":["import workouts from '../Exercises/Workout.json';\n\nexport function calculatePerformance(workout){\n    // Constants for maximum values (you need to set these based on your personal records)\n    const MaxStrain = 21; // Example value\n    const MaxCalories = 2000; // Example value\n\n    // Weights for each component\n    const W1 = 0.3; // Weight for Strain\n    const W2 = 0.25; // Weight for Heart Rate\n    const W3 = 0.25; // Weight for Calories\n    const W4 = 0.2; // Weight for Heart Rate Zones\n\n    // Normalizing Strain and Calories\n    const normalizedStrain = Math.min((workout.score.strain / MaxStrain) * 10, 10);\n    const normalizedCalories = Math.min((Math.floor(workout.score.kilojoule*0.239006) / MaxCalories) * 10, 10); // Assuming kilojoule is equivalent to calories\n\n    // Heart Rate Intensity Score\n    const hrIntensityScore = Math.min((workout.score.average_heart_rate / workout.score.max_heart_rate) * 10, 10);\n\n    // Heart Rate Zones Score\n    const totalZoneTime = workout.score.zone_duration.zone_five_milli + workout.score.zone_duration.zone_four_milli + workout.score.zone_duration.zone_three_milli + workout.score.zone_duration.zone_two_milli + workout.score.zone_duration.zone_one_milli + workout.score.zone_duration.zone_zero_milli;\n    const hrZoneScore = Math.min(((workout.score.zone_duration.zone_five_milli * 5 + workout.score.zone_duration.zone_four_milli * 4 + workout.score.zone_duration.zone_three_milli * 3 + workout.score.zone_duration.zone_two_milli * 2 + workout.score.zone_duration.zone_one_milli * 1) / totalZoneTime) * 10, 10);\n\n    // Calculate final performance score\n    const performanceScore = Math.min((W1 * normalizedStrain + W2 * hrIntensityScore + W3 * normalizedCalories + W4 * hrZoneScore), 10);\n    \n    return Math.floor(performanceScore*100)/100;\n}\n\nexport function getWorkoutType(id){\n    for(let i = 0; i < workouts.length; ++i){\n        if(workouts[i].id === id){\n            return workouts[i].sport;\n        } \n    }\n\n    return \"Activity (no recognized Sport)\"\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,2BAA2B;AAEhD,OAAO,SAASC,oBAAoBA,CAACC,OAAO,EAAC;EACzC;EACA,MAAMC,SAAS,GAAG,EAAE,CAAC,CAAC;EACtB,MAAMC,WAAW,GAAG,IAAI,CAAC,CAAC;;EAE1B;EACA,MAAMC,EAAE,GAAG,GAAG,CAAC,CAAC;EAChB,MAAMC,EAAE,GAAG,IAAI,CAAC,CAAC;EACjB,MAAMC,EAAE,GAAG,IAAI,CAAC,CAAC;EACjB,MAAMC,EAAE,GAAG,GAAG,CAAC,CAAC;;EAEhB;EACA,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAAET,OAAO,CAACU,KAAK,CAACC,MAAM,GAAGV,SAAS,GAAI,EAAE,EAAE,EAAE,CAAC;EAC9E,MAAMW,kBAAkB,GAAGJ,IAAI,CAACC,GAAG,CAAED,IAAI,CAACK,KAAK,CAACb,OAAO,CAACU,KAAK,CAACI,SAAS,GAAC,QAAQ,CAAC,GAAGZ,WAAW,GAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;;EAE5G;EACA,MAAMa,gBAAgB,GAAGP,IAAI,CAACC,GAAG,CAAET,OAAO,CAACU,KAAK,CAACM,kBAAkB,GAAGhB,OAAO,CAACU,KAAK,CAACO,cAAc,GAAI,EAAE,EAAE,EAAE,CAAC;;EAE7G;EACA,MAAMC,aAAa,GAAGlB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACC,eAAe,GAAGpB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACE,eAAe,GAAGrB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACG,gBAAgB,GAAGtB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACI,cAAc,GAAGvB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACK,cAAc,GAAGxB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACM,eAAe;EACtS,MAAMC,WAAW,GAAGlB,IAAI,CAACC,GAAG,CAAE,CAACT,OAAO,CAACU,KAAK,CAACS,aAAa,CAACC,eAAe,GAAG,CAAC,GAAGpB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACE,eAAe,GAAG,CAAC,GAAGrB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACG,gBAAgB,GAAG,CAAC,GAAGtB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACI,cAAc,GAAG,CAAC,GAAGvB,OAAO,CAACU,KAAK,CAACS,aAAa,CAACK,cAAc,GAAG,CAAC,IAAIN,aAAa,GAAI,EAAE,EAAE,EAAE,CAAC;;EAEjT;EACA,MAAMS,gBAAgB,GAAGnB,IAAI,CAACC,GAAG,CAAEN,EAAE,GAAGI,gBAAgB,GAAGH,EAAE,GAAGW,gBAAgB,GAAGV,EAAE,GAAGO,kBAAkB,GAAGN,EAAE,GAAGoB,WAAW,EAAG,EAAE,CAAC;EAEnI,OAAOlB,IAAI,CAACK,KAAK,CAACc,gBAAgB,GAAC,GAAG,CAAC,GAAC,GAAG;AAC/C;AAEA,OAAO,SAASC,cAAcA,CAACC,EAAE,EAAC;EAC9B,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,QAAQ,CAACiC,MAAM,EAAE,EAAED,CAAC,EAAC;IACpC,IAAGhC,QAAQ,CAACgC,CAAC,CAAC,CAACD,EAAE,KAAKA,EAAE,EAAC;MACrB,OAAO/B,QAAQ,CAACgC,CAAC,CAAC,CAACE,KAAK;IAC5B;EACJ;EAEA,OAAO,gCAAgC;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}