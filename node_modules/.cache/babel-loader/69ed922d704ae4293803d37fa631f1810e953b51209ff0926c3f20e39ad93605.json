{"ast":null,"code":"import workouts from '../Exercises/Workout.json';\nfunction daysBetweenDates(isoDate) {\n  const date1 = new Date(isoDate);\n  const date2 = new Date();\n  const oneDay = 24 * 60 * 60 * 1000; // milliseconds in a day\n  const diffInTime = Math.abs(date2 - date1); // difference in milliseconds\n\n  return Math.ceil(diffInTime / oneDay); // rounding up to account for partial days\n}\nexport const getMusclesFromWorkouts = exercises => {\n  var muscles = [];\n  for (let i = 0; i < exercises.length; ++i) {\n    for (let j = 0; j < workouts.length; ++j) {\n      if (exercises[i].sport_id === workouts[j].id) {\n        for (let k = 0; k < workouts[j].muscles.length; ++k) {\n          const days = daysBetweenDates(exercises[i].created_at);\n          /*if(workouts[j].muscles[k].frequency - days <= 0){\n              workouts[j].muscles[k].frequency = 0;\n          } else{\n              workouts[j].muscles[k].frequency = workouts[j].muscles[k].frequency - days;\n              console.log(workouts[j].muscles[k].frequency);\n          }\n          muscles.push(workouts[j].muscles[k]);*/\n          console.log(days);\n          if (days === 0 || days === 1) {\n            workouts[j].muscles[k].frequency = 3;\n          } else if (days === 2) {\n            workouts[j].muscles[k].frequency = 2;\n          } else if (days === 3) {\n            workouts[j].muscles[k].frequency = 1;\n          } else {\n            workouts[j].muscles[k].frequency = 0;\n          }\n          if (shouldAdd(workouts[j].muscles[k], muscles)) muscles.push(workouts[j].muscles[k]);\n        }\n      }\n    }\n  }\n  return muscles;\n};\nfunction shouldAdd(data, array) {\n  for (let index of array) {\n    if (index.muscles[0] === data.muscles[0]) {\n      if (data.frequency > index.frequency) return true;else return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["workouts","daysBetweenDates","isoDate","date1","Date","date2","oneDay","diffInTime","Math","abs","ceil","getMusclesFromWorkouts","exercises","muscles","i","length","j","sport_id","id","k","days","created_at","console","log","frequency","shouldAdd","push","data","array","index"],"sources":["/Users/peretarrida__/Desktop/PERE TARRIDA/Projectes/WHOOP_PROJECT/src/Utils/bodypartParse.js"],"sourcesContent":["import workouts from '../Exercises/Workout.json';\n\nfunction daysBetweenDates(isoDate) {\n    const date1 = new Date(isoDate);\n    const date2 = new Date();\n\n    const oneDay = 24 * 60 * 60 * 1000; // milliseconds in a day\n    const diffInTime = Math.abs(date2 - date1); // difference in milliseconds\n\n    return Math.ceil(diffInTime / oneDay); // rounding up to account for partial days\n}\n\nexport const getMusclesFromWorkouts = (exercises) => {\n    var muscles = [];\n\n    for(let i = 0; i < exercises.length; ++i){\n        for(let j = 0; j < workouts.length; ++j){\n            if(exercises[i].sport_id === workouts[j].id){\n                for(let k = 0; k < workouts[j].muscles.length; ++k){\n                    const days = daysBetweenDates(exercises[i].created_at);\n                    /*if(workouts[j].muscles[k].frequency - days <= 0){\n                        workouts[j].muscles[k].frequency = 0;\n                    } else{\n                        workouts[j].muscles[k].frequency = workouts[j].muscles[k].frequency - days;\n                        console.log(workouts[j].muscles[k].frequency);\n                    }\n                    muscles.push(workouts[j].muscles[k]);*/\n                    console.log(days)\n                    if(days === 0 || days === 1){\n                        workouts[j].muscles[k].frequency = 3;\n                    } else if(days === 2){\n                        workouts[j].muscles[k].frequency = 2;\n                    } else if(days === 3){\n                        workouts[j].muscles[k].frequency = 1;\n                    } else{\n                        workouts[j].muscles[k].frequency = 0;\n                    }\n                    \n                    if(shouldAdd(workouts[j].muscles[k], muscles))muscles.push(workouts[j].muscles[k]);\n                }\n            }\n        }\n    }\n\n  \n    \n    return muscles;\n}\n\nfunction shouldAdd(data, array){\n    for(let index of array){\n        if(index.muscles[0] === data.muscles[0]){\n            if(data.frequency > index.frequency) return true\n            else return false;\n        }\n    }\n\n    return true;\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,2BAA2B;AAEhD,SAASC,gBAAgBA,CAACC,OAAO,EAAE;EAC/B,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACF,OAAO,CAAC;EAC/B,MAAMG,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;EAExB,MAAME,MAAM,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;EACpC,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACJ,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC;;EAE5C,OAAOK,IAAI,CAACE,IAAI,CAACH,UAAU,GAAGD,MAAM,CAAC,CAAC,CAAC;AAC3C;AAEA,OAAO,MAAMK,sBAAsB,GAAIC,SAAS,IAAK;EACjD,IAAIC,OAAO,GAAG,EAAE;EAEhB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAE,EAAED,CAAC,EAAC;IACrC,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,QAAQ,CAACe,MAAM,EAAE,EAAEC,CAAC,EAAC;MACpC,IAAGJ,SAAS,CAACE,CAAC,CAAC,CAACG,QAAQ,KAAKjB,QAAQ,CAACgB,CAAC,CAAC,CAACE,EAAE,EAAC;QACxC,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,QAAQ,CAACgB,CAAC,CAAC,CAACH,OAAO,CAACE,MAAM,EAAE,EAAEI,CAAC,EAAC;UAC/C,MAAMC,IAAI,GAAGnB,gBAAgB,CAACW,SAAS,CAACE,CAAC,CAAC,CAACO,UAAU,CAAC;UACtD;AACpB;AACA;AACA;AACA;AACA;AACA;UACoBC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;UACjB,IAAGA,IAAI,KAAK,CAAC,IAAIA,IAAI,KAAK,CAAC,EAAC;YACxBpB,QAAQ,CAACgB,CAAC,CAAC,CAACH,OAAO,CAACM,CAAC,CAAC,CAACK,SAAS,GAAG,CAAC;UACxC,CAAC,MAAM,IAAGJ,IAAI,KAAK,CAAC,EAAC;YACjBpB,QAAQ,CAACgB,CAAC,CAAC,CAACH,OAAO,CAACM,CAAC,CAAC,CAACK,SAAS,GAAG,CAAC;UACxC,CAAC,MAAM,IAAGJ,IAAI,KAAK,CAAC,EAAC;YACjBpB,QAAQ,CAACgB,CAAC,CAAC,CAACH,OAAO,CAACM,CAAC,CAAC,CAACK,SAAS,GAAG,CAAC;UACxC,CAAC,MAAK;YACFxB,QAAQ,CAACgB,CAAC,CAAC,CAACH,OAAO,CAACM,CAAC,CAAC,CAACK,SAAS,GAAG,CAAC;UACxC;UAEA,IAAGC,SAAS,CAACzB,QAAQ,CAACgB,CAAC,CAAC,CAACH,OAAO,CAACM,CAAC,CAAC,EAAEN,OAAO,CAAC,EAACA,OAAO,CAACa,IAAI,CAAC1B,QAAQ,CAACgB,CAAC,CAAC,CAACH,OAAO,CAACM,CAAC,CAAC,CAAC;QACtF;MACJ;IACJ;EACJ;EAIA,OAAON,OAAO;AAClB,CAAC;AAED,SAASY,SAASA,CAACE,IAAI,EAAEC,KAAK,EAAC;EAC3B,KAAI,IAAIC,KAAK,IAAID,KAAK,EAAC;IACnB,IAAGC,KAAK,CAAChB,OAAO,CAAC,CAAC,CAAC,KAAKc,IAAI,CAACd,OAAO,CAAC,CAAC,CAAC,EAAC;MACpC,IAAGc,IAAI,CAACH,SAAS,GAAGK,KAAK,CAACL,SAAS,EAAE,OAAO,IAAI,MAC3C,OAAO,KAAK;IACrB;EACJ;EAEA,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}